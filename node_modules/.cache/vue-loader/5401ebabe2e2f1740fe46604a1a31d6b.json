{"remainingRequest":"C:\\Users\\Jagdeep\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Jagdeep\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Jagdeep\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Jagdeep\\Documents\\GitHub\\BTHC-Volunteer-Manager\\src\\views\\components\\JavascriptComponents\\Modals.vue?vue&type=template&id=a7535d9a&","dependencies":[{"path":"C:\\Users\\Jagdeep\\Documents\\GitHub\\BTHC-Volunteer-Manager\\src\\views\\components\\JavascriptComponents\\Modals.vue","mtime":1610352305447},{"path":"C:\\Users\\Jagdeep\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Jagdeep\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Jagdeep\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Jagdeep\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}