{"remainingRequest":"C:\\Users\\Jagdeep\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Jagdeep\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Jagdeep\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Jagdeep\\Documents\\GitHub\\BTHC-Volunteer-Manager\\src\\views\\components\\JavascriptComponents\\Typography.vue?vue&type=template&id=0e5d3bfc&","dependencies":[{"path":"C:\\Users\\Jagdeep\\Documents\\GitHub\\BTHC-Volunteer-Manager\\src\\views\\components\\JavascriptComponents\\Typography.vue","mtime":1610352305616},{"path":"C:\\Users\\Jagdeep\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Jagdeep\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Jagdeep\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Jagdeep\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF92bS5fbSgwKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgWwogICAgICBfYygiaDIiLCB7IHN0YXRpY0NsYXNzOiAibXQtbGcgbWItNSIgfSwgWwogICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiVHlwb2dyYXBoeSIpXSkKICAgICAgXSksCiAgICAgIF9jKCJoMyIsIHsgc3RhdGljQ2xhc3M6ICJoNCB0ZXh0LXN1Y2Nlc3MgZm9udC13ZWlnaHQtYm9sZCIgfSwgWwogICAgICAgIF92bS5fdigiSGVhZGluZ3MiKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgcHktMyBhbGlnbi1pdGVtcy1jZW50ZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNtYWxsIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtdXBwZXJjYXNlIHRleHQtbXV0ZWQgZm9udC13ZWlnaHQtYm9sZCIgfSwKICAgICAgICAgICAgW192bS5fdigiSGVhZGluZyAxIildCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tOSIgfSwgWwogICAgICAgICAgX2MoImgxIiwgeyBzdGF0aWNDbGFzczogIm1iLTAiIH0sIFtfdm0uX3YoIkFyZ29uIERlc2lnbiBTeXN0ZW0iKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IHB5LTMgYWxpZ24taXRlbXMtY2VudGVyIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tMyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzbWFsbCIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LW11dGVkIGZvbnQtd2VpZ2h0LWJvbGQiIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkhlYWRpbmcgMiIpXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTkiIH0sIFsKICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0wIiB9LCBbX3ZtLl92KCJBcmdvbiBEZXNpZ24gU3lzdGVtIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyBweS0zIGFsaWduLWl0ZW1zLWNlbnRlciIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAic21hbGwiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC11cHBlcmNhc2UgdGV4dC1tdXRlZCBmb250LXdlaWdodC1ib2xkIiB9LAogICAgICAgICAgICBbX3ZtLl92KCJIZWFkaW5nIDMiKV0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS05IiB9LCBbCiAgICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAibWItMCIgfSwgW192bS5fdigiQXJnb24gRGVzaWduIFN5c3RlbSIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgcHktMyBhbGlnbi1pdGVtcy1jZW50ZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNtYWxsIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtdXBwZXJjYXNlIHRleHQtbXV0ZWQgZm9udC13ZWlnaHQtYm9sZCIgfSwKICAgICAgICAgICAgW192bS5fdigiSGVhZGluZyA0IildCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tOSIgfSwgWwogICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogIm1iLTAiIH0sIFtfdm0uX3YoIkFyZ29uIERlc2lnbiBTeXN0ZW0iKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IHB5LTMgYWxpZ24taXRlbXMtY2VudGVyIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tMyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzbWFsbCIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LW11dGVkIGZvbnQtd2VpZ2h0LWJvbGQiIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkhlYWRpbmcgNSIpXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTkiIH0sIFsKICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJtYi0wIiB9LCBbX3ZtLl92KCJBcmdvbiBEZXNpZ24gU3lzdGVtICIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgcHktMyBhbGlnbi1pdGVtcy1jZW50ZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNtYWxsIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtdXBwZXJjYXNlIHRleHQtbXV0ZWQgZm9udC13ZWlnaHQtYm9sZCIgfSwKICAgICAgICAgICAgW192bS5fdigiSGVhZGluZyA2IildCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tOSIgfSwgWwogICAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTAiIH0sIFtfdm0uX3YoIkFyZ29uIERlc2lnbiBTeXN0ZW0gIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAiaDQgdGV4dC1zdWNjZXNzIGZvbnQtd2VpZ2h0LWJvbGQgbXQtbWQiIH0sIFsKICAgICAgICBfdm0uX3YoIkRpc3BsYXkgdGl0bGVzIikKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IHB5LTMgYWxpZ24taXRlbXMtY2VudGVyIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tMyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzbWFsbCIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LW11dGVkIGZvbnQtd2VpZ2h0LWJvbGQiIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkRpc3BsYXkgMSIpXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTkiIH0sIFsKICAgICAgICAgIF9jKCJoMSIsIHsgc3RhdGljQ2xhc3M6ICJkaXNwbGF5LTEgbWItMCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIkFyZ29uIERlc2lnbiBTeXN0ZW0iKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgcHktMyBhbGlnbi1pdGVtcy1jZW50ZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNtYWxsIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtdXBwZXJjYXNlIHRleHQtbXV0ZWQgZm9udC13ZWlnaHQtYm9sZCIgfSwKICAgICAgICAgICAgW192bS5fdigiRGlzcGxheSAyIildCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tOSIgfSwgWwogICAgICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogImRpc3BsYXktMiBtYi0wIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiQXJnb24gRGVzaWduIFN5c3RlbSIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyBweS0zIGFsaWduLWl0ZW1zLWNlbnRlciIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAic21hbGwiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC11cHBlcmNhc2UgdGV4dC1tdXRlZCBmb250LXdlaWdodC1ib2xkIiB9LAogICAgICAgICAgICBbX3ZtLl92KCJEaXNwbGF5IDMiKV0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS05IiB9LCBbCiAgICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAiZGlzcGxheS0zIG1iLTAiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJBcmdvbiBEZXNpZ24gU3lzdGVtIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IHB5LTMgYWxpZ24taXRlbXMtY2VudGVyIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tMyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzbWFsbCIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LW11dGVkIGZvbnQtd2VpZ2h0LWJvbGQiIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkRpc3BsYXkgNCIpXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTkiIH0sIFsKICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJkaXNwbGF5LTQgbWItMCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIkFyZ29uIERlc2lnbiBTeXN0ZW0iKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogImg0IHRleHQtc3VjY2VzcyBmb250LXdlaWdodC1ib2xkIG10LW1kIiB9LCBbCiAgICAgICAgX3ZtLl92KCJTcGVjaWFsaXplZCB0aXRsZXMiKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgcHktMyBhbGlnbi1pdGVtcy1jZW50ZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNtYWxsIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtdXBwZXJjYXNlIHRleHQtbXV0ZWQgZm9udC13ZWlnaHQtYm9sZCIgfSwKICAgICAgICAgICAgW192bS5fdigiSGVhZGluZyIpXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTkiIH0sIFsKICAgICAgICAgIF9jKCJoMyIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkaW5nIG1iLTAiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJBcmdvbiBEZXNpZ24gU3lzdGVtIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IHB5LTMgYWxpZ24taXRlbXMtY2VudGVyIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tMyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzbWFsbCIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LW11dGVkIGZvbnQtd2VpZ2h0LWJvbGQiIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkhlYWRpbmcgdGl0bGUiKV0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS05IiB9LCBbCiAgICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZy10aXRsZSB0ZXh0LXdhcm5pbmcgbWItMCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIkFyZ29uIERlc2lnbiBTeXN0ZW0iKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgcHktMyBhbGlnbi1pdGVtcy1jZW50ZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNtYWxsIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtdXBwZXJjYXNlIHRleHQtbXV0ZWQgZm9udC13ZWlnaHQtYm9sZCIgfSwKICAgICAgICAgICAgW192bS5fdigiSGVhZGluZyBzZWFjdGlvbiIpXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTkiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJkaXNwbGF5LTMiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkhlYWRlciB3aXRoIHNtYWxsIHN1YnRpdGxlICIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJsZWFkIHRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiQWNjb3JkaW5nIHRvIHRoZSBOYXRpb25hbCBPY2VhbmljIGFuZCBBdG1vc3BoZXJpYyBBZG1pbmlzdHJhdGlvbiwgVGVkLCBTY2FtYm9zLCBOU0lEQ2xlYWQgc2NlbnRpc3QsIHB1dHMgdGhlIHBvdGVudGlhbGx5IHJlY29yZCBtYXhpbXVtLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAiaDQgdGV4dC1zdWNjZXNzIGZvbnQtd2VpZ2h0LWJvbGQgbXQtbWQiIH0sIFsKICAgICAgICBfdm0uX3YoIlBhcmFncmFwaHMiKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgcHktMyBhbGlnbi1pdGVtcy1jZW50ZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNtYWxsIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtdXBwZXJjYXNlIHRleHQtbXV0ZWQgZm9udC13ZWlnaHQtYm9sZCIgfSwKICAgICAgICAgICAgW192bS5fdigiUGFyYWdyYXBoIildCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tOSIgfSwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiSSB3aWxsIGJlIHRoZSBsZWFkZXIgb2YgYSBjb21wYW55IHRoYXQgZW5kcyB1cCBiZWluZyB3b3J0aCBiaWxsaW9ucyBvZiBkb2xsYXJzLCBiZWNhdXNlIEkgZ290IHRoZSBhbnN3ZXJzLiBJIHVuZGVyc3RhbmQgY3VsdHVyZS4gSSBhbSB0aGUgbnVjbGV1cy4gSSB0aGluayB0aGF04oCZcyBhIHJlc3BvbnNpYmlsaXR5IHRoYXQgSSBoYXZlLCB0byBwdXNoIHBvc3NpYmlsaXRpZXMsIHRvIHNob3cgcGVvcGxlLCB0aGlzIGlzIHRoZSBsZXZlbCB0aGF0IHRoaW5ncyBjb3VsZCBiZSBhdC4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IHB5LTMgYWxpZ24taXRlbXMtY2VudGVyIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tMyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzbWFsbCIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LW11dGVkIGZvbnQtd2VpZ2h0LWJvbGQiIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkxlYWQgdGV4dCIpXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTkiIH0sIFsKICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImxlYWQiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJJIHdpbGwgYmUgdGhlIGxlYWRlciBvZiBhIGNvbXBhbnkgdGhhdCBlbmRzIHVwIGJlaW5nIHdvcnRoIGJpbGxpb25zIG9mIGRvbGxhcnMsIGJlY2F1c2UgSSBnb3QgdGhlIGFuc3dlcnMuIEkgdW5kZXJzdGFuZCBjdWx0dXJlLiBJIGFtIHRoZSBudWNsZXVzLiBJIHRoaW5rIHRoYXTigJlzIGEgcmVzcG9uc2liaWxpdHkgdGhhdCBJIGhhdmUsIHRvIHB1c2ggcG9zc2liaWxpdGllcywgdG8gc2hvdyBwZW9wbGUsIHRoaXMgaXMgdGhlIGxldmVsIHRoYXQgdGhpbmdzIGNvdWxkIGJlIGF0LiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgcHktMyBhbGlnbi1pdGVtcy1jZW50ZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNtYWxsIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtdXBwZXJjYXNlIHRleHQtbXV0ZWQgZm9udC13ZWlnaHQtYm9sZCIgfSwKICAgICAgICAgICAgW192bS5fdigiUXVvdGUiKV0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS05IiB9LCBbCiAgICAgICAgICBfYygiYmxvY2txdW90ZSIsIHsgc3RhdGljQ2xhc3M6ICJibG9ja3F1b3RlIiB9LCBbCiAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogIm1iLTAiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gSW50ZWdlciBwb3N1ZXJlIGVyYXQgYSBhbnRlLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZm9vdGVyIiwgeyBzdGF0aWNDbGFzczogImJsb2NrcXVvdGUtZm9vdGVyIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJTb21lb25lIGZhbW91cyBpbiAiKSwKICAgICAgICAgICAgICBfYygiY2l0ZSIsIHsgYXR0cnM6IHsgdGl0bGU6ICJTb3VyY2UgVGl0bGUiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJTb3VyY2UgVGl0bGUiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyBweS0zIGFsaWduLWl0ZW1zLWNlbnRlciIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAic21hbGwiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC11cHBlcmNhc2UgdGV4dC1tdXRlZCBmb250LXdlaWdodC1ib2xkIiB9LAogICAgICAgICAgICBbX3ZtLl92KCJNdXRlZCB0ZXh0IildCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tOSIgfSwgWwogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCBtYi0wIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiSSB3aWxsIGJlIHRoZSBsZWFkZXIgb2YgYSBjb21wYW55IHRoYXQgZW5kcyB1cCBiZWluZyB3b3J0aCBiaWxsaW9ucyBvZiBkb2xsYXJzLCBiZWNhdXNlIEkgZ290IHRoZSBhbnN3ZXJzLi4uIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyBweS0zIGFsaWduLWl0ZW1zLWNlbnRlciIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAic21hbGwiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC11cHBlcmNhc2UgdGV4dC1tdXRlZCBmb250LXdlaWdodC1ib2xkIiB9LAogICAgICAgICAgICBbX3ZtLl92KCJQcmltYXJ5IHRleHQiKV0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS05IiB9LCBbCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXByaW1hcnkiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJJIHdpbGwgYmUgdGhlIGxlYWRlciBvZiBhIGNvbXBhbnkgdGhhdCBlbmRzIHVwIGJlaW5nIHdvcnRoIGJpbGxpb25zIG9mIGRvbGxhcnMsIGJlY2F1c2UgSSBnb3QgdGhlIGFuc3dlcnMuLi4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IHB5LTMgYWxpZ24taXRlbXMtY2VudGVyIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tMyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzbWFsbCIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LW11dGVkIGZvbnQtd2VpZ2h0LWJvbGQiIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkluZm8gdGV4dCIpXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTkiIH0sIFsKICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtaW5mbyBtYi0wIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiSSB3aWxsIGJlIHRoZSBsZWFkZXIgb2YgYSBjb21wYW55IHRoYXQgZW5kcyB1cCBiZWluZyB3b3J0aCBiaWxsaW9ucyBvZiBkb2xsYXJzLCBiZWNhdXNlIEkgZ290IHRoZSBhbnN3ZXJzLi4uIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyBweS0zIGFsaWduLWl0ZW1zLWNlbnRlciIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAic21hbGwiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC11cHBlcmNhc2UgdGV4dC1tdXRlZCBmb250LXdlaWdodC1ib2xkIiB9LAogICAgICAgICAgICBbX3ZtLl92KCJTdWNjZXNzIHRleHQiKV0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS05IiB9LCBbCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXN1Y2Nlc3MgbWItMCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkkgd2lsbCBiZSB0aGUgbGVhZGVyIG9mIGEgY29tcGFueSB0aGF0IGVuZHMgdXAgYmVpbmcgd29ydGggYmlsbGlvbnMgb2YgZG9sbGFycywgYmVjYXVzZSBJIGdvdCB0aGUgYW5zd2Vycy4uLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgcHktMyBhbGlnbi1pdGVtcy1jZW50ZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNtYWxsIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtdXBwZXJjYXNlIHRleHQtbXV0ZWQgZm9udC13ZWlnaHQtYm9sZCIgfSwKICAgICAgICAgICAgW192bS5fdigiV2FybmluZyB0ZXh0IildCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tOSIgfSwgWwogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC13YXJuaW5nIG1iLTAiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJJIHdpbGwgYmUgdGhlIGxlYWRlciBvZiBhIGNvbXBhbnkgdGhhdCBlbmRzIHVwIGJlaW5nIHdvcnRoIGJpbGxpb25zIG9mIGRvbGxhcnMsIGJlY2F1c2UgSSBnb3QgdGhlIGFuc3dlcnMuLi4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IHB5LTMgYWxpZ24taXRlbXMtY2VudGVyIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tMyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzbWFsbCIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LW11dGVkIGZvbnQtd2VpZ2h0LWJvbGQiIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkRhbmdlciB0ZXh0IildCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tOSIgfSwgWwogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1kYW5nZXIgbWItMCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkkgd2lsbCBiZSB0aGUgbGVhZGVyIG9mIGEgY29tcGFueSB0aGF0IGVuZHMgdXAgYmVpbmcgd29ydGggYmlsbGlvbnMgb2YgZG9sbGFycywgYmVjYXVzZSBJIGdvdCB0aGUgYW5zd2Vycy4uLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}